//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34011
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CBRemoteControl.WinFormClient.ClientService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ClientService.IClientService")]
    public interface IClientService {
        
        // CODEGEN: 命名空间 http://tempuri.org/ 的元素名称 PutCommandResult 以后生成的消息协定未标记为 nillable
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/PutCommand", ReplyAction="http://tempuri.org/IClientService/PutCommandResponse")]
        CBRemoteControl.WinFormClient.ClientService.PutCommandResponse PutCommand(CBRemoteControl.WinFormClient.ClientService.PutCommandRequest request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/PutCommand", ReplyAction="http://tempuri.org/IClientService/PutCommandResponse")]
        System.IAsyncResult BeginPutCommand(CBRemoteControl.WinFormClient.ClientService.PutCommandRequest request, System.AsyncCallback callback, object asyncState);
        
        CBRemoteControl.WinFormClient.ClientService.PutCommandResponse EndPutCommand(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetScreen", ReplyAction="http://tempuri.org/IClientService/GetScreenResponse")]
        CBRemoteControl.Model.ScreenPackage GetScreen(string clientID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/GetScreen", ReplyAction="http://tempuri.org/IClientService/GetScreenResponse")]
        System.IAsyncResult BeginGetScreen(string clientID, System.AsyncCallback callback, object asyncState);
        
        CBRemoteControl.Model.ScreenPackage EndGetScreen(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetServerList", ReplyAction="http://tempuri.org/IClientService/GetServerListResponse")]
        System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo> GetServerList();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/GetServerList", ReplyAction="http://tempuri.org/IClientService/GetServerListResponse")]
        System.IAsyncResult BeginGetServerList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo> EndGetServerList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetCacheCount", ReplyAction="http://tempuri.org/IClientService/GetCacheCountResponse")]
        int GetCacheCount();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientService/GetCacheCount", ReplyAction="http://tempuri.org/IClientService/GetCacheCountResponse")]
        System.IAsyncResult BeginGetCacheCount(System.AsyncCallback callback, object asyncState);
        
        int EndGetCacheCount(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PutCommandRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="PutCommand", Namespace="http://tempuri.org/", Order=0)]
        public CBRemoteControl.WinFormClient.ClientService.PutCommandRequestBody Body;
        
        public PutCommandRequest() {
        }
        
        public PutCommandRequest(CBRemoteControl.WinFormClient.ClientService.PutCommandRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class PutCommandRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public CBRemoteControl.Model.ServerInfo clientInfo;
        
        public PutCommandRequestBody() {
        }
        
        public PutCommandRequestBody(CBRemoteControl.Model.ServerInfo clientInfo) {
            this.clientInfo = clientInfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class PutCommandResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="PutCommandResponse", Namespace="http://tempuri.org/", Order=0)]
        public CBRemoteControl.WinFormClient.ClientService.PutCommandResponseBody Body;
        
        public PutCommandResponse() {
        }
        
        public PutCommandResponse(CBRemoteControl.WinFormClient.ClientService.PutCommandResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class PutCommandResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string PutCommandResult;
        
        public PutCommandResponseBody() {
        }
        
        public PutCommandResponseBody(string PutCommandResult) {
            this.PutCommandResult = PutCommandResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientServiceChannel : CBRemoteControl.WinFormClient.ClientService.IClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PutCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PutCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetScreenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetScreenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CBRemoteControl.Model.ScreenPackage Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CBRemoteControl.Model.ScreenPackage)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCacheCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCacheCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientServiceClient : System.ServiceModel.ClientBase<CBRemoteControl.WinFormClient.ClientService.IClientService>, CBRemoteControl.WinFormClient.ClientService.IClientService {
        
        private BeginOperationDelegate onBeginPutCommandDelegate;
        
        private EndOperationDelegate onEndPutCommandDelegate;
        
        private System.Threading.SendOrPostCallback onPutCommandCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetScreenDelegate;
        
        private EndOperationDelegate onEndGetScreenDelegate;
        
        private System.Threading.SendOrPostCallback onGetScreenCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServerListDelegate;
        
        private EndOperationDelegate onEndGetServerListDelegate;
        
        private System.Threading.SendOrPostCallback onGetServerListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCacheCountDelegate;
        
        private EndOperationDelegate onEndGetCacheCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetCacheCountCompletedDelegate;
        
        public ClientServiceClient() {
        }
        
        public ClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<PutCommandCompletedEventArgs> PutCommandCompleted;
        
        public event System.EventHandler<GetScreenCompletedEventArgs> GetScreenCompleted;
        
        public event System.EventHandler<GetServerListCompletedEventArgs> GetServerListCompleted;
        
        public event System.EventHandler<GetCacheCountCompletedEventArgs> GetCacheCountCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CBRemoteControl.WinFormClient.ClientService.PutCommandResponse CBRemoteControl.WinFormClient.ClientService.IClientService.PutCommand(CBRemoteControl.WinFormClient.ClientService.PutCommandRequest request) {
            return base.Channel.PutCommand(request);
        }
        
        public string PutCommand(CBRemoteControl.Model.ServerInfo clientInfo) {
            CBRemoteControl.WinFormClient.ClientService.PutCommandRequest inValue = new CBRemoteControl.WinFormClient.ClientService.PutCommandRequest();
            inValue.Body = new CBRemoteControl.WinFormClient.ClientService.PutCommandRequestBody();
            inValue.Body.clientInfo = clientInfo;
            CBRemoteControl.WinFormClient.ClientService.PutCommandResponse retVal = ((CBRemoteControl.WinFormClient.ClientService.IClientService)(this)).PutCommand(inValue);
            return retVal.Body.PutCommandResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CBRemoteControl.WinFormClient.ClientService.IClientService.BeginPutCommand(CBRemoteControl.WinFormClient.ClientService.PutCommandRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPutCommand(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPutCommand(CBRemoteControl.Model.ServerInfo clientInfo, System.AsyncCallback callback, object asyncState) {
            CBRemoteControl.WinFormClient.ClientService.PutCommandRequest inValue = new CBRemoteControl.WinFormClient.ClientService.PutCommandRequest();
            inValue.Body = new CBRemoteControl.WinFormClient.ClientService.PutCommandRequestBody();
            inValue.Body.clientInfo = clientInfo;
            return ((CBRemoteControl.WinFormClient.ClientService.IClientService)(this)).BeginPutCommand(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CBRemoteControl.WinFormClient.ClientService.PutCommandResponse CBRemoteControl.WinFormClient.ClientService.IClientService.EndPutCommand(System.IAsyncResult result) {
            return base.Channel.EndPutCommand(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndPutCommand(System.IAsyncResult result) {
            CBRemoteControl.WinFormClient.ClientService.PutCommandResponse retVal = ((CBRemoteControl.WinFormClient.ClientService.IClientService)(this)).EndPutCommand(result);
            return retVal.Body.PutCommandResult;
        }
        
        private System.IAsyncResult OnBeginPutCommand(object[] inValues, System.AsyncCallback callback, object asyncState) {
            CBRemoteControl.Model.ServerInfo clientInfo = ((CBRemoteControl.Model.ServerInfo)(inValues[0]));
            return this.BeginPutCommand(clientInfo, callback, asyncState);
        }
        
        private object[] OnEndPutCommand(System.IAsyncResult result) {
            string retVal = this.EndPutCommand(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPutCommandCompleted(object state) {
            if ((this.PutCommandCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PutCommandCompleted(this, new PutCommandCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PutCommandAsync(CBRemoteControl.Model.ServerInfo clientInfo) {
            this.PutCommandAsync(clientInfo, null);
        }
        
        public void PutCommandAsync(CBRemoteControl.Model.ServerInfo clientInfo, object userState) {
            if ((this.onBeginPutCommandDelegate == null)) {
                this.onBeginPutCommandDelegate = new BeginOperationDelegate(this.OnBeginPutCommand);
            }
            if ((this.onEndPutCommandDelegate == null)) {
                this.onEndPutCommandDelegate = new EndOperationDelegate(this.OnEndPutCommand);
            }
            if ((this.onPutCommandCompletedDelegate == null)) {
                this.onPutCommandCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPutCommandCompleted);
            }
            base.InvokeAsync(this.onBeginPutCommandDelegate, new object[] {
                        clientInfo}, this.onEndPutCommandDelegate, this.onPutCommandCompletedDelegate, userState);
        }
        
        public CBRemoteControl.Model.ScreenPackage GetScreen(string clientID) {
            return base.Channel.GetScreen(clientID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetScreen(string clientID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetScreen(clientID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public CBRemoteControl.Model.ScreenPackage EndGetScreen(System.IAsyncResult result) {
            return base.Channel.EndGetScreen(result);
        }
        
        private System.IAsyncResult OnBeginGetScreen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string clientID = ((string)(inValues[0]));
            return this.BeginGetScreen(clientID, callback, asyncState);
        }
        
        private object[] OnEndGetScreen(System.IAsyncResult result) {
            CBRemoteControl.Model.ScreenPackage retVal = this.EndGetScreen(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetScreenCompleted(object state) {
            if ((this.GetScreenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetScreenCompleted(this, new GetScreenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetScreenAsync(string clientID) {
            this.GetScreenAsync(clientID, null);
        }
        
        public void GetScreenAsync(string clientID, object userState) {
            if ((this.onBeginGetScreenDelegate == null)) {
                this.onBeginGetScreenDelegate = new BeginOperationDelegate(this.OnBeginGetScreen);
            }
            if ((this.onEndGetScreenDelegate == null)) {
                this.onEndGetScreenDelegate = new EndOperationDelegate(this.OnEndGetScreen);
            }
            if ((this.onGetScreenCompletedDelegate == null)) {
                this.onGetScreenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetScreenCompleted);
            }
            base.InvokeAsync(this.onBeginGetScreenDelegate, new object[] {
                        clientID}, this.onEndGetScreenDelegate, this.onGetScreenCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo> GetServerList() {
            return base.Channel.GetServerList();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetServerList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServerList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo> EndGetServerList(System.IAsyncResult result) {
            return base.Channel.EndGetServerList(result);
        }
        
        private System.IAsyncResult OnBeginGetServerList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetServerList(callback, asyncState);
        }
        
        private object[] OnEndGetServerList(System.IAsyncResult result) {
            System.Collections.Generic.List<CBRemoteControl.Model.ServerInfo> retVal = this.EndGetServerList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServerListCompleted(object state) {
            if ((this.GetServerListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServerListCompleted(this, new GetServerListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServerListAsync() {
            this.GetServerListAsync(null);
        }
        
        public void GetServerListAsync(object userState) {
            if ((this.onBeginGetServerListDelegate == null)) {
                this.onBeginGetServerListDelegate = new BeginOperationDelegate(this.OnBeginGetServerList);
            }
            if ((this.onEndGetServerListDelegate == null)) {
                this.onEndGetServerListDelegate = new EndOperationDelegate(this.OnEndGetServerList);
            }
            if ((this.onGetServerListCompletedDelegate == null)) {
                this.onGetServerListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServerListCompleted);
            }
            base.InvokeAsync(this.onBeginGetServerListDelegate, null, this.onEndGetServerListDelegate, this.onGetServerListCompletedDelegate, userState);
        }
        
        public int GetCacheCount() {
            return base.Channel.GetCacheCount();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetCacheCount(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCacheCount(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetCacheCount(System.IAsyncResult result) {
            return base.Channel.EndGetCacheCount(result);
        }
        
        private System.IAsyncResult OnBeginGetCacheCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetCacheCount(callback, asyncState);
        }
        
        private object[] OnEndGetCacheCount(System.IAsyncResult result) {
            int retVal = this.EndGetCacheCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCacheCountCompleted(object state) {
            if ((this.GetCacheCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCacheCountCompleted(this, new GetCacheCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCacheCountAsync() {
            this.GetCacheCountAsync(null);
        }
        
        public void GetCacheCountAsync(object userState) {
            if ((this.onBeginGetCacheCountDelegate == null)) {
                this.onBeginGetCacheCountDelegate = new BeginOperationDelegate(this.OnBeginGetCacheCount);
            }
            if ((this.onEndGetCacheCountDelegate == null)) {
                this.onEndGetCacheCountDelegate = new EndOperationDelegate(this.OnEndGetCacheCount);
            }
            if ((this.onGetCacheCountCompletedDelegate == null)) {
                this.onGetCacheCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCacheCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetCacheCountDelegate, null, this.onEndGetCacheCountDelegate, this.onGetCacheCountCompletedDelegate, userState);
        }
    }
}
